{"componentChunkName":"component---src-templates-blog-post-js","path":"/laravel-dynamic-validation-error-message/","result":{"data":{"site":{"siteMetadata":{"title":"tateren.github.io"}},"markdownRemark":{"id":"77f5595a-4f03-538b-a65a-a201dc41f214","excerpt":"attribute とか parameters ではなくバリデーションの過程で得られる情報をエラーメッセージに埋め込みたかった。 実装例 カンマ区切りの数値形式の文字列である事を検証するカスタムバリデーションルールで数値形式の文字列じゃなかった値をエラーメッセージに埋め込む。  を実装して Rule…","html":"<p>attribute とか parameters ではなくバリデーションの過程で得られる情報をエラーメッセージに埋め込みたかった。</p>\n<h2>実装例</h2>\n<p>カンマ区切りの数値形式の文字列である事を検証するカスタムバリデーションルールで数値形式の文字列じゃなかった値をエラーメッセージに埋め込む。</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Rules</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>ValidatorAwareRule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommaSeparatedNumeric</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Rule</span><span class=\"token punctuation\">,</span> ValidatorAwareRule\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> Validator <span class=\"token variable\">$validator</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @param Validator $validator\n     * @return $this\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setValidator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> self\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">validator</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param string $attribute\n     * @param mixed $values\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">passes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attribute</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">validator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">addReplacer</span><span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">':value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">':attribute must be comma separated numeric. (:value is not numeric)'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ValidatorAwareRule</code> を実装して Rule クラス内から <code class=\"language-text\">Validator</code> に触れるようにする。</li>\n<li><code class=\"language-text\">Validator::addReplacer()</code> で動的にエラーメッセージの Replacer を追加する。</li>\n</ul>\n<h2>実行例</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; use App\\Rules\\CommaSeparatedNumeric\n&gt;&gt;&gt; Validator::make([&#39;input&#39; =&gt; &#39;1,2,3&#39;], [&#39;input&#39; =&gt; new CommaSeparatedNumeric()])-&gt;validate()\n=&gt; [\n     &quot;input&quot; =&gt; &quot;1,2,3&quot;,\n   ]\n\n&gt;&gt;&gt; Validator::make([&#39;input&#39; =&gt; &#39;1,2,3,a,b,c&#39;], [&#39;input&#39; =&gt; new CommaSeparatedNumeric()])-&gt;validate()\nIlluminate\\Validation\\ValidationException with message &#39;input must be comma separated numeric. (a is not numeric)&#39;</code></pre></div>\n<p>この例だったら最初から配列に変換しておけ感はある。</p>","frontmatter":{"title":"Laravel のバリデーションエラーメッセージに動的に値を埋め込む","date":"May 24, 2022","description":"Laravel のバリデーションエラーメッセージに動的に値を埋め込む方法"}},"previous":{"fields":{"slug":"/set-page-break-preview-in-phpspreadsheet/"},"frontmatter":{"title":"Phpspreadsheet で表示モードを改ページプレビューに設定する"}},"next":null},"pageContext":{"id":"77f5595a-4f03-538b-a65a-a201dc41f214","previousPostId":"c8ccb4dd-715b-54b5-9527-528f10707740","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}